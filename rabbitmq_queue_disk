#!/bin/bash
#
# Plugin to monitor the queues of a virtual_host in RabbitMQ
#
# Usage: Link or copy into /etc/munin/node.d/
#
# Parameters
#     env.vhost <AMQ virtual host>
#
# Magic markers (optional - only used by munin-config and some
# installation scripts):
#
#%# family=auto
#%# capabilities=autoconf

# If run with the "autoconf"-parameter, give our opinion on wether we
# should be run on this system or not. This is optinal, and only used by
# munin-config. In the case of this plugin, we should most probably
# always be included.

if [ "$1" = "autoconf" ]; then
	echo yes
	exit 0
fi

# If run with the "config"-parameter, give out information on how the
# graphs should look.

HOME=/tmp/
VHOST=${vhost:-"/"}
QUEUES=$(HOME=$HOME rabbitmqctl list_queues -p $VHOST name | grep -v '^Listing' | grep -v 'done\.$' | grep -v "\.\.\." | sed 's/[^a-z0-9]\+/_/g')

if [ "$1" = "config" ]; then
	# The host name this plugin is for. (Can be overridden to have
	# one machine answer for several)

	# The title of the graph
	echo "graph_title RabbitMQ $VHOST Disk activity by queue"
	# Arguments to "rrdtool graph". In this case, tell it that the
	# lower limit of the graph is '0', and that 1k=1000 (not 1024)
	echo 'graph_args --base 1000 --vertical-label Messages -l 0'
	# The Y-axis label
	echo 'graph_vlabel disk'
	# We want Cur/Min/Avg/Max unscaled (i.e. 0.42 load instead of
	# 420 milliload)
	#echo 'graph_scale no'
	echo 'graph_category RabbitMQ'

	for queue in $QUEUES; do
		echo "$queue.label $queue"
		echo "$queue.info Memory used by $queue"
	done

	echo 'graph_info Show disk activity by queue'
	# Last, if run with the "config"-parameter, quit here (don't
	# display any data)
	exit 0
fi

# If not run with any parameters at all (or only unknown ones), do the
# real work - i.e. display the data. Almost always this will be
# "value" subfield for every data field.

IFS=$'\n'
for line in $(HOME=$HOME rabbitmqctl list_queues -p $VHOST name disk_reads disk_writes | grep -v "^Listing" | grep -v "done.$" | grep -v "\.\.\."); do
	echo -n "$line" | cut -f1 | tr -d '\n' | sed 's/[^a-z0-9]\+/_/g'
	echo -n ".read_count.value "
	echo -n "$line" | cut -f2 | tr -d '\n'
	echo ""

	echo -n "$line" | cut -f1 | tr -d '\n' | sed 's/[^a-z0-9]\+/_/g'
	echo -n ".write_count.value "
	echo -n "$line" | cut -f3 | tr -d '\n'
	echo ""
done
IFS=$' \t\n'
